#!/bin/bash

# üöÄ Script de V√©rification D√©ploiement GorFit
# V√©rifie que tout est pr√™t pour le d√©ploiement Vercel

echo "üîç V√©rification du d√©ploiement GorFit..."
echo "=========================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction pour afficher les r√©sultats
print_status() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

echo ""
echo "üì¶ V√©rification des d√©pendances..."

# V√©rifier Node.js
if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version)
    print_status 0 "Node.js install√©: $NODE_VERSION"
else
    print_status 1 "Node.js non install√©"
fi

# V√©rifier npm
if command -v npm &> /dev/null; then
    NPM_VERSION=$(npm --version)
    print_status 0 "npm install√©: $NPM_VERSION"
else
    print_status 1 "npm non install√©"
fi

echo ""
echo "üèóÔ∏è V√©rification du build..."

# V√©rifier que le build fonctionne
if npm run build &> /dev/null; then
    print_status 0 "Build Next.js r√©ussi"
else
    print_status 1 "Erreur lors du build"
fi

echo ""
echo "üìÅ V√©rification des fichiers critiques..."

# V√©rifier les fichiers essentiels
FILES=(
    "package.json"
    "next.config.ts"
    "vercel.json"
    "src/app/layout.tsx"
    "src/app/page.tsx"
    "src/lib/supabase.ts"
)

for file in "${FILES[@]}"; do
    if [ -f "$file" ]; then
        print_status 0 "Fichier pr√©sent: $file"
    else
        print_status 1 "Fichier manquant: $file"
    fi
done

echo ""
echo "üîß V√©rification de la configuration..."

# V√©rifier vercel.json
if [ -f "vercel.json" ]; then
    if grep -q "nextjs" vercel.json; then
        print_status 0 "Configuration Vercel correcte"
    else
        print_status 1 "Configuration Vercel incorrecte"
    fi
else
    print_status 1 "Fichier vercel.json manquant"
fi

# V√©rifier package.json
if [ -f "package.json" ]; then
    if grep -q "next" package.json; then
        print_status 0 "Next.js configur√© dans package.json"
    else
        print_status 1 "Next.js non configur√©"
    fi
else
    print_status 1 "package.json manquant"
fi

echo ""
echo "üåê V√©rification des variables d'environnement..."

# V√©rifier env.example
if [ -f "env.example" ]; then
    print_status 0 "Fichier env.example pr√©sent"
    echo -e "${YELLOW}‚ö†Ô∏è  N'oubliez pas de configurer les variables dans Vercel${NC}"
else
    print_status 1 "Fichier env.example manquant"
fi

echo ""
echo "üìä V√©rification des composants..."

# V√©rifier les composants principaux
COMPONENTS=(
    "src/components/ChallengesSection.tsx"
    "src/components/AbandonedChallengesSection.tsx"
    "src/components/ChallengeCard.tsx"
    "src/components/Timer.tsx"
    "src/components/ProgressCharts.tsx"
)

for component in "${COMPONENTS[@]}"; do
    if [ -f "$component" ]; then
        print_status 0 "Composant pr√©sent: $(basename $component)"
    else
        print_status 1 "Composant manquant: $(basename $component)"
    fi
done

echo ""
echo "üóÑÔ∏è V√©rification des services..."

# V√©rifier les services
SERVICES=(
    "src/lib/challengeService.ts"
    "src/lib/reminderService.ts"
    "src/lib/supabase.ts"
)

for service in "${SERVICES[@]}"; do
    if [ -f "$service" ]; then
        print_status 0 "Service pr√©sent: $(basename $service)"
    else
        print_status 1 "Service manquant: $(basename $service)"
    fi
done

echo ""
echo "üìù V√©rification de la documentation..."

# V√©rifier la documentation
DOCS=(
    "README.md"
    "DEPLOYMENT-GUIDE.md"
    "CHALLENGES-FINAL-SUMMARY.md"
    "REMINDER-SYSTEM-README.md"
)

for doc in "${DOCS[@]}"; do
    if [ -f "$doc" ]; then
        print_status 0 "Documentation pr√©sente: $doc"
    else
        print_status 1 "Documentation manquante: $doc"
    fi
done

echo ""
echo "üîç V√©rification Git..."

# V√©rifier le statut Git
if git status --porcelain | grep -q .; then
    echo -e "${YELLOW}‚ö†Ô∏è  Il y a des modifications non commit√©es${NC}"
    git status --short
else
    print_status 0 "Tous les changements sont commit√©s"
fi

# V√©rifier la branche
CURRENT_BRANCH=$(git branch --show-current)
if [ "$CURRENT_BRANCH" = "main" ]; then
    print_status 0 "Sur la branche main"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Sur la branche: $CURRENT_BRANCH${NC}"
fi

echo ""
echo "üöÄ R√©sum√© du d√©ploiement..."

echo ""
echo "üìã Checklist de d√©ploiement Vercel:"
echo "1. ‚úÖ Code pouss√© vers GitHub"
echo "2. ‚è≥ Importer le projet dans Vercel"
echo "3. ‚è≥ Configurer les variables d'environnement"
echo "4. ‚è≥ D√©ployer l'application"
echo "5. ‚è≥ Configurer Supabase avec le domaine Vercel"
echo "6. ‚è≥ D√©ployer les Edge Functions"
echo "7. ‚è≥ Tester l'application"

echo ""
echo "üîó URLs importantes:"
echo "- GitHub: https://github.com/gwendo85/gorfit"
echo "- Vercel Dashboard: https://vercel.com/dashboard"
echo "- Supabase Dashboard: https://supabase.com/dashboard"

echo ""
echo "üéØ Prochaines √©tapes:"
echo "1. Aller sur https://vercel.com/dashboard"
echo "2. Cliquer sur 'New Project'"
echo "3. Importer le repository gwendo85/gorfit"
echo "4. Configurer les variables d'environnement"
echo "5. Cliquer sur 'Deploy'"

echo ""
echo -e "${GREEN}üéâ V√©rification termin√©e ! Votre projet est pr√™t pour le d√©ploiement.${NC}" 